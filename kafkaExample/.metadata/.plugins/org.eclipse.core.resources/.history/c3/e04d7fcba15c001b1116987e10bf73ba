package myartifact;

import java.io.IOException;
//import util.properties packages
import java.util.Properties;

//import simple producer packages
import org.apache.kafka.clients.producer.Producer;

//import KafkaProducer packages
import org.apache.kafka.clients.producer.KafkaProducer;

//import ProducerRecord packages
import org.apache.kafka.clients.producer.ProducerRecord;



import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Produced;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Locale;
import java.util.Properties;
import java.util.concurrent.CountDownLatch;

/**
 * Demonstrates, using the high-level KStream DSL, how to implement the WordCount program
 * that computes a simple word occurrence histogram from an input text.
 * <p>
 * In this example, the input stream reads from a topic named "streams-plaintext-input", where the values of messages
 * represent lines of text; and the histogram output is written to topic "streams-wordcount-output" where each record
 * is an updated count of a single word.
 * <p>
 * Before running this example you must create the input topic and the output topic (e.g. via
 * {@code bin/kafka-topics.sh --create ...}), and write some data to the input topic (e.g. via
 * {@code bin/kafka-console-producer.sh}). Otherwise you won't see any data arriving in the output topic.
 */
public final class MyProducer {



	  static Properties getStreamsConfig(final String[] args) throws IOException {
	        final Properties props = new Properties();
	        if (args != null && args.length > 0) {
	            try (final FileInputStream fis = new FileInputStream(args[0])) {
	                props.load(fis);
	            }
	            if (args.length > 1) {
	                System.out.println("Warning: Some command line arguments were ignored. This demo only accepts an optional configuration file.");
	            }
	        }
	        props.putIfAbsent(StreamsConfig.APPLICATION_ID_CONFIG, "streams-wordcount");
	        props.putIfAbsent(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	        props.putIfAbsent(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);
	        props.putIfAbsent(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());
	        props.putIfAbsent(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());

	        // setting offset reset to earliest so that we can re-run the demo code with the same pre-loaded data
	        // Note: To re-run the demo, you need to use the offset reset tool:
	        // https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Streams+Application+Reset+Tool
	        props.putIfAbsent(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
	        return props;
	    }
	
	
	
	public static void main(String[] args) {
		
		System.out.println("Hello");
		try {
			//org.apache.kafka.common.serialization.StringSerializer a ;
			
			// Check arguments length value
		    //  if(args.length == 0){
		    //     System.out.println("Enter topic name");
		    //     return;
		    //  }
		      
		      //Assign topicName to string variable
		      String topicName = "streams-plaintext-input";
		      
		      // create instance for properties to access producer configs   
		      Properties props = new Properties();
		      
		      //Assign localhost id
		      props.put("bootstrap.servers", "localhost:9092");
		      
		      //Set acknowledgements for producer requests.      
		      props.put("acks","all");
		      
		      //If the request fails, the producer can automatically retry,
		      props.put("retries", 0);
		      
		      //Specify buffer size in config
		      props.put("batch.size", 16384);
		      
		      //Reduce the no of requests less than 0   
		      props.put("linger.ms", 1);
		      
		      //The buffer.memory controls the total amount of memory available to the producer for buffering.   
		      props.put("buffer.memory", 33554432);
		      
		      props.put("key.serializer", 
		         "org.apache.kafka.common.serialization.StringSerializer");
		         
		      props.put("value.serializer", 
		         "org.apache.kafka.common.serialization.StringSerializer");
		      
		      Producer<String, String> producer = new KafkaProducer
		         <String, String>(props);
		            
		      for(int i = 0; i < 100; i++) {
		    	 int  key = i % 3 ;
		    	 
		         producer.send(new ProducerRecord<String, String>(topicName, 
		          "key"+  Integer.toString(key),"{"
		            		+ "\"value\": " +  Integer.toString(i)));
		               System.out.println("Message sent successfully");
		              
		      }
			
		      producer.close();
		      
		      
		      
		      
		      
		      
		      
			System.in.read();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

